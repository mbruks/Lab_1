write_str([]):-!.
write_str([H|Tail]):-put(H),write_str(Tail).

write_list_str([]):-!.
write_list_str([H|T]):-write_str(H),nl,write_list_str(T).

read_str(A,N,Flag):-get0(X),r_str(X,A,[],N,0,Flag).
r_str(-1,A,A,N,N,1):-!.
r_str(10,A,A,N,N,0):-!.
r_str(X,A,B,N,K,Flag):-K1 is K+1,append(B,[X],B1),get0(X1),r_str(X1,A,B1,N,K1,Flag).

append1([],List2,List2).
append1([H1|T1],List2,[H1|T3]):-append1(T1,List2,T3).

read_list_str(List):-read_str(A,_,Flag),read_list_str([A],List,Flag).
read_list_str(List,List,1):-!.
read_list_str(Cur_list,List,0):-
	read_str(A,_,Flag),append(Cur_list,[A],C_l),read_list_str(C_l,List,Flag).

length_word([],0):-!.
length_word([_|T],L):-length_word(T,L1),L is L1+1.

in_list([El|_],El).
in_list([_|T],El):-in_list(T,El).

reverse(A, Z) :- reverse(A,Z,[]).
reverse([],Z,Z).
reverse([H|T],Z,Acc) :- reverse(T,Z,[H|Acc]).

      %1
number_1:-see('D:/Prolog/input.txt'),read_list_str(List),seen,
	tell('D:/Prolog/output.txt'),number_1(List,0,K),write(K),told.
number_1([],K,K):-!.
number_1([H|T],K,Kol):-length_word(H,L),(L>K -> K1 is L,number_1(T,K1,Kol);number_1(T,K,Kol)).

      %2
number_2:-see('D:/Prolog/input.txt'),read_list_str(List),seen,
	  tell('D:/Prolog/output.txt'),number_2(List,0,Kol),write(Kol),told.

number_2([],K,K):-!.
number_2([H|T],K,Kol):-not(in_list(H,32)),K1 is K+1,number_2(T,K1,Kol),!.
number_2([_|T],K,Kol):-number_2(T,K,Kol),!.












